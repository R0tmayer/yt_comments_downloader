import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import os
from file_manager import save_comments_to_file
from file_manager import get_next_filename
from downloader import download_youtube_comments
from settings import save_folder, load_folder

class ChannelTab(tk.Frame):
    def __init__(self, app, parent):
        super().__init__(parent, bg="#18181b")
        self.app = app
        self.pack(expand=True, fill="both")
        self._setup_ui()
        self._set_channel_status("‚è∏Ô∏è –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def _setup_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_label = tk.Label(self, text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∫–∞–Ω–∞–ª–∞", font=(None, 22, "bold"), fg="#fff", bg="#18181b")
        title_label.pack(anchor="center", fill="x", pady=(24, 4))
        # –í–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        top_block = tk.Frame(self, bg="#18181b")
        top_block.pack(anchor="w", padx=40, pady=(0, 0))
        self.setup_channel_folder_selection(top_block)
        # –ë–ª–æ–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
        url_block = tk.Frame(self, bg="#18181b")
        url_block.pack(anchor="w", padx=40, pady=(18, 0))
        url_label = tk.Label(url_block, text="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", font=(None, 15), fg="#fff", bg="#18181b")
        url_label.pack(anchor="w", pady=(4, 0))
        self.channel_url_entry = tk.Entry(url_block, width=80, font=(None, 14), fg="#fff", bg="#23232a", insertbackground="#fff", relief="solid", bd=2)
        self.channel_url_entry.pack(anchor="w", pady=4, ipady=8)
        self.channel_url_entry.insert(0, "https://www.youtube.com/@–õ–∞–π—Ñ—Ö–∞–∫–∏–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π")
        self.channel_url_entry_placeholder = "–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª..."
        self.channel_url_entry.bind("<FocusIn>", self._clear_channel_placeholder)
        self.channel_url_entry.bind("<FocusOut>", self._add_channel_placeholder)
        self._add_channel_placeholder()
        # --- –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ ---
        count_block = tk.Frame(
            self,
            bg="#23232a",
            highlightbackground="#444",
            highlightthickness=2,
            bd=0,
            width=650,
            height=115
        )
        count_block.pack(anchor="w", padx=40, pady=(18, 0))
        count_block.pack_propagate(False)
        count_block.configure(relief="ridge")
        count_label = tk.Label(count_block, text="üìä –°–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å", font=(None, 15, "bold"), fg="#fff", bg="#23232a")
        count_label.pack(anchor="w", pady=(8, 4), padx=12)
        self.video_download_mode = tk.StringVar(value="all")
        radio_all = ttk.Radiobutton(count_block, text="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ", variable=self.video_download_mode, value="all", command=self._toggle_video_count_entry)
        radio_all.pack(anchor="w", pady=(0, 2), padx=24)
        radio_count = ttk.Radiobutton(count_block, text="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", variable=self.video_download_mode, value="count", command=self._toggle_video_count_entry)
        radio_count.pack(anchor="w", pady=(0, 2), padx=24, side="left")
        self.video_count_entry = tk.Entry(count_block, width=10, font=(None, 15), fg="#fff", bg="#18181b", insertbackground="#fff", relief="flat", bd=0, state="disabled", highlightthickness=1, highlightbackground="#6c63ff")
        self.video_count_entry.pack(anchor="w", side="left", padx=(8, 0), pady=(0, 2))
        self.video_count_entry.insert(0, "5")
        # –ö–Ω–æ–ø–∫–∏
        btn_block = tk.Frame(self, bg="#18181b")
        btn_block.pack(anchor="w", padx=40, pady=(16, 0))
        self.channel_download_btn = ttk.Button(
            btn_block,
            text="–°–∫–∞—á–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
            command=self.start_channel_download,
            style='Primary.TButton')
        self.channel_download_btn.pack(side="left")
        self.channel_stop_btn = ttk.Button(
            btn_block,
            text="–°–¢–û–ü",
            style='Danger.TButton',
            command=self.stop_channel_download,
            state="normal"
        )
        self.channel_stop_btn.pack(side="left", padx=(16, 0))
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_block = tk.Frame(self, bg="#18181b")
        progress_block.pack(anchor="w", padx=40, pady=(16, 0))
        self.channel_progress_label = tk.Label(progress_block, text="–°–∫–∞—á–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: 0", font=(None, 13), fg="#b2b2b2", bg="#18181b", anchor="w")
        self.channel_progress_label.pack(side="left")
        # –°—Ç–∞—Ç—É—Å
        status_block = tk.Frame(self, bg="#18181b")
        status_block.pack(anchor="w", padx=40, pady=(4, 20))
        self.channel_status_label = tk.Label(status_block, text="–°—Ç–∞—Ç—É—Å: ", font=(None, 13), fg="#b2b2b2", bg="#18181b", anchor="w")
        self.channel_status_label.pack(side="left")
        self.status_value_label = tk.Label(status_block, text="", font=(None, 13, "bold"), fg="#b2b2b2", bg="#18181b")
        self.status_value_label.pack(side="left")

    def setup_channel_folder_selection(self, parent=None):
        frame_parent = parent if parent is not None else self
        folder_frame = tk.Frame(frame_parent, bg="#18181b")
        folder_frame.pack(pady=8, fill="x")
        folder_text_label = tk.Label(folder_frame, text="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", font=(None, 14), fg="#b2b2b2", bg="#18181b")
        folder_text_label.pack(side="left", padx=(0, 10))
        self.channel_folder_label = tk.Label(folder_frame, text="–ù–µ –≤—ã–±—Ä–∞–Ω–∞", font=(None, 14), fg="#b2b2b2", bg="#18181b", anchor="w", width=35)
        self.channel_folder_label.pack(side="left", fill="x", expand=True, padx=(0, 8))
        choose_folder_btn = ttk.Button(folder_frame, text="–í—ã–±—Ä–∞—Ç—å", command=self.choose_channel_folder, style='Folder.TButton')
        choose_folder_btn.pack(side="right", padx=(10, 0))
        self.load_channel_folder()

    def load_channel_folder(self):
        self.channel_save_folder = load_folder()
        if self.channel_save_folder:
            self.channel_folder_label.config(text=self.channel_save_folder, fg="white")

    def choose_channel_folder(self) -> None:
        initial_dir = self.channel_save_folder if self.channel_save_folder else "~"
        folder = filedialog.askdirectory(initialdir=initial_dir, title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        if folder:
            self.channel_save_folder = folder
            self.channel_folder_label.config(text=folder, fg="white")
            save_folder(folder)

    def _toggle_video_count_entry(self):
        if self.video_download_mode.get() == "count":
            self.video_count_entry.config(state="normal")
        else:
            self.video_count_entry.config(state="disabled")

    def stop_channel_download(self):
        self._stop_channel_download = True
        self.channel_stop_btn.state(["disabled"])

    def _clear_channel_placeholder(self, event=None):
        if self.channel_url_entry.get() == self.channel_url_entry_placeholder:
            self.channel_url_entry.delete(0, tk.END)
            self.channel_url_entry.config(fg="#fff")

    def _add_channel_placeholder(self, event=None):
        if not self.channel_url_entry.get():
            self.channel_url_entry.insert(0, self.channel_url_entry_placeholder)
            self.channel_url_entry.config(fg="#b2b2b2")

    def start_channel_download(self):
        self._stop_channel_download = False  # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        url = self.channel_url_entry.get().strip()
        if url == self.channel_url_entry_placeholder:
            url = ""
        if not url:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.")
            return
        # –§–∏–ª—å—Ç—Ä: –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if "youtube.com/watch?v=" in url or "youtu.be/" in url:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –∞ –Ω–µ –Ω–∞ –≤–∏–¥–µ–æ!")
            return
        if not hasattr(self, 'channel_save_folder') or not self.channel_save_folder:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
        self.channel_stop_btn.state(["!disabled"])
        self.channel_download_btn.state(["disabled"])
        self.channel_progress_label.config(text="–°–∫–∞—á–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: 0")
        self.channel_status_label.config(text="–°—Ç–∞—Ç—É—Å: ")
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –≤–∏–¥–µ–æ
        max_videos = None
        if self.video_download_mode.get() == "count":
            try:
                max_videos = int(self.video_count_entry.get())
                if max_videos <= 0:
                    raise ValueError
            except Exception:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ.")
                self.channel_download_btn.state(["!disabled"])
                return
        threading.Thread(target=self._download_channel_comments, args=(url, max_videos), daemon=True).start()

    def _download_channel_comments(self, channel_url, max_videos=None):
        import requests, re
        import time
        from concurrent.futures import ThreadPoolExecutor, as_completed
        self._set_channel_status("‚è∏Ô∏è –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self._set_channel_status("–ò—â—É –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ...")
        video_ids = self._get_last_videos(channel_url, max_videos=max_videos)
        if not video_ids:
            self._set_channel_status("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ")
            self.channel_download_btn.state(["!disabled"])
            self.channel_stop_btn.state(["disabled"])
            return
        created_files = []
        max_workers = min(5, len(video_ids))  # –¥–æ 5 –ø–æ—Ç–æ–∫–æ–≤
        stop_flag = self
        def process_video(idx, video_id):
            if getattr(stop_flag, '_stop_channel_download', False):
                return (idx, None, None, '‚èπÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
            video_url = f"https://www.youtube.com/watch?v={video_id}"
            comments = []
            def progress_callback(current, total):
                self.channel_progress_label.config(text=f"–°–∫–∞—á–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {current}")
                if getattr(stop_flag, '_stop_channel_download', False):
                    raise Exception("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            try:
                comments = download_youtube_comments(video_url, progress_callback)
            except Exception as e:
                return (idx, None, None, f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {e}")
            if comments:
                folder = self.channel_save_folder if self.channel_save_folder else "."
                filename = get_next_filename(folder)
                save_comments_to_file(comments, filename)
                return (idx, filename, len(comments), f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
            else:
                return (idx, None, 0, f"‚ùå –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≤–∏–¥–µ–æ {idx+1}")
        futures = []
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            for idx, video_id in enumerate(video_ids):
                futures.append(executor.submit(process_video, idx, video_id))
            for f in as_completed(futures):
                idx, filename, count, status = f.result()
                self._set_channel_status(status)
                if filename:
                    created_files.append(filename)
                self.channel_progress_label.config(text="–°–∫–∞—á–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: 0")
                time.sleep(0.5)
                if getattr(self, '_stop_channel_download', False):
                    break
        if not getattr(self, '_stop_channel_download', False):
            self._set_channel_status(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(created_files)} –≤–∏–¥–µ–æ")
            self.channel_download_btn.state(["!disabled"])
            self.channel_stop_btn.state(["disabled"])
            self.after(0, lambda: self.show_channel_success_popup(created_files, len(video_ids)))
        else:
            self.channel_download_btn.state(["!disabled"])
            self.channel_stop_btn.state(["disabled"])
            self.after(0, lambda: self.show_channel_success_popup(created_files, len(video_ids), interrupted=True))

    def _set_channel_status(self, text):
        # –î–æ–±–∞–≤–ª—è—é —ç–º–æ–¥–∑–∏ –∫ —Å—Ç–∞—Ç—É—Å–∞–º
        emoji_map = [
            "‚è∏Ô∏è", "üîç", "üõ†Ô∏è", "üì•", "üíæ", "‚ùå", "‚úÖ", "üìä", "‚èπÔ∏è"
        ]
        if any(text.strip().startswith(e) for e in emoji_map):
            self.channel_status_label.config(text=f"–°—Ç–∞—Ç—É—Å: {text}")
        else:
            emoji = ""
            if "–û–∂–∏–¥–∞–Ω–∏–µ" in text or "–ì–æ—Ç–æ–≤" in text:
                emoji = "‚è∏Ô∏è"
            elif "–ò—â—É" in text or "–ü—Ä–æ–≤–µ—Ä—è—é" in text:
                emoji = "üîç"
            elif "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é" in text or "–ü–æ–¥–∫–ª—é—á–∞—é—Å—å" in text:
                emoji = "üõ†Ô∏è"
            elif "–°–∫–∞—á–∏–≤–∞—é" in text or "–ó–∞–≥—Ä—É–∂–∞—é" in text:
                emoji = "üì•"
            elif "–°–æ—Ö—Ä–∞–Ω—è—é" in text:
                emoji = "üíæ"
            elif "–û—à–∏–±–∫–∞" in text:
                emoji = "‚ùå"
            elif "—É—Å–ø–µ—à–Ω–æ" in text or "–≥–æ—Ç–æ–≤–æ" in text or "–ì–æ—Ç–æ–≤–æ" in text:
                emoji = "‚úÖ"
            elif "–ù–∞–π–¥–µ–Ω–æ" in text:
                emoji = "üìä"
            elif "–ø—Ä–µ—Ä–≤–∞–Ω–æ" in text or "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" in text:
                emoji = "‚èπÔ∏è"
            else:
                emoji = "‚ÑπÔ∏è"
            self.channel_status_label.config(text=f"–°—Ç–∞—Ç—É—Å: {emoji} {text}")

    def _get_last_videos(self, channel_url, max_videos=5):
        import requests, re
        try:
            html = requests.get(channel_url).text
            video_ids = re.findall(r'"videoId":"([\w-]{11})"', html)
            seen = set()
            unique_ids = []
            for vid in video_ids:
                if vid not in seen:
                    unique_ids.append(vid)
                    seen.add(vid)
                if max_videos is not None and len(unique_ids) >= max_videos:
                    break
            return unique_ids
        except Exception:
            return []

    def show_channel_success_popup(self, file_list, total_videos, interrupted=False):
        import tkinter as tk
        popup = tk.Toplevel(self)
        popup.title("–£—Å–ø–µ—Ö!" if not interrupted else "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        popup.geometry("500x300")
        popup.configure(bg="#18181b")
        popup.grab_set()
        popup.focus()
        if interrupted:
            msg = f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(file_list)} –∏–∑ {total_videos}\n\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
        else:
            msg = f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(file_list)} –≤–∏–¥–µ–æ –∏–∑ {total_videos}!\n\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
        label = tk.Label(popup, text=msg, font=(None, 14), fg="#fff", bg="#18181b")
        label.pack(pady=(20, 10))
        files_text = "\n".join([os.path.basename(f) for f in file_list])
        files_label = tk.Label(popup, text=files_text, font=(None, 12), fg="#6c63ff", bg="#18181b", justify="left")
        files_label.pack(pady=(0, 20))
        if len(file_list) < total_videos:
            warn = tk.Label(popup, text="–ù–µ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.", font=(None, 12), fg="#ffb300", bg="#18181b")
            warn.pack(pady=(0, 10))
        close_btn = tk.Button(popup, text="–ó–∞–∫—Ä—ã—Ç—å", command=popup.destroy, font=(None, 12), bg="#fff", fg="#23232a", relief="flat", padx=16, pady=6)
        close_btn.pack(pady=(0, 16)) 