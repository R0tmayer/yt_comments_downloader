"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º (tkinter).
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, font
import threading

from config import *
from settings import save_folder, load_folder
from file_manager import get_next_filename, save_comments_to_file
from downloader import download_youtube_comments, validate_youtube_url
from popup import SuccessPopup

class App(tk.Tk):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    def __init__(self):
        super().__init__()
        self.title("YTCommentsDownloader by R0tmayer")
        self.geometry("700x600")
        self.resizable(False, False)
        self.save_folder = None
        self.configure(bg="#18181b")
        self.setup_ui()
        self.load_settings()
        self.set_status("‚è∏Ô∏è –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def setup_ui(self) -> None:
        style = ttk.Style()
        style.theme_use('clam')
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (—Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è)
        style.configure('Rounded.TButton',
                        foreground='#fff',
                        background='#6c63ff',
                        borderwidth=0,
                        focusthickness=0,
                        focuscolor='none',
                        padding=10,
                        relief='flat',
                        font=(None, 14, 'bold'))
        style.map('Rounded.TButton',
                  background=[('active', '#8577ff'), ('pressed', '#574fcf')],
                  foreground=[('disabled', '#b2b2b2')])
        style.layout('Rounded.TButton', [
            ('Button.focus', {'children': [
                ('Button.padding', {'children': [
                    ('Button.label', {'side': 'left', 'expand': 1})
                ], 'sticky': 'nswe'})
            ], 'sticky': 'nswe'})
        ])
        # –í—Ç–æ—Ä–∏—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (—Ç—ë–º–Ω–∞—è)
        style.configure('Folder.TButton',
                        foreground='#fff',
                        background='#23232a',
                        borderwidth=0,
                        focusthickness=0,
                        focuscolor='none',
                        padding=8,
                        relief='flat',
                        font=(None, 13))
        style.map('Folder.TButton',
                  background=[('active', '#444'), ('pressed', '#18181b')],
                  foreground=[('disabled', '#b2b2b2')])
        style.layout('Folder.TButton', [
            ('Button.focus', {'children': [
                ('Button.padding', {'children': [
                    ('Button.label', {'side': 'left', 'expand': 1})
                ], 'sticky': 'nswe'})
            ], 'sticky': 'nswe'})
        ])
        style.configure('Red.TButton',
            foreground='#fff',
            background='#d32f2f',
            borderwidth=0,
            focusthickness=0,
            focuscolor='none',
            padding=10,
            relief='flat',
            font=(None, 14, 'bold')
        )
        style.map('Red.TButton',
            background=[('!disabled', '#d32f2f')],
            foreground=[('!disabled', '#fff')]
        )
        style.configure('Primary.TButton',
            foreground='#fff',
            background='#6c63ff',
            borderwidth=0,
            focusthickness=0,
            focuscolor='none',
            padding=10,
            relief='flat',
            font=(None, 14, 'bold')
        )
        style.map('Primary.TButton',
            background=[('active', '#8577ff'), ('pressed', '#574fcf'), ('!disabled', '#6c63ff')],
            foreground=[('!disabled', '#fff')]
        )
        style.layout('Primary.TButton', [
            ('Button.focus', {'children': [
                ('Button.padding', {'children': [
                    ('Button.label', {'side': 'left', 'expand': 1})
                ], 'sticky': 'nswe'})
            ], 'sticky': 'nswe'})
        ])
        style.configure('Danger.TButton',
            foreground='#fff',
            background='#d32f2f',
            borderwidth=0,
            focusthickness=0,
            focuscolor='none',
            padding=10,
            relief='flat',
            font=(None, 14, 'bold')
        )
        style.map('Danger.TButton',
            background=[('active', '#b71c1c'), ('pressed', '#b71c1c'), ('!disabled', '#d32f2f')],
            foreground=[('!disabled', '#fff')]
        )
        style.layout('Danger.TButton', [
            ('Button.focus', {'children': [
                ('Button.padding', {'children': [
                    ('Button.label', {'side': 'left', 'expand': 1})
                ], 'sticky': 'nswe'})
            ], 'sticky': 'nswe'})
        ])
        # --- –í–∫–ª–∞–¥–∫–∏ ---
        notebook = ttk.Notebook(self)
        notebook.pack(expand=True, fill="both")

        # --- –í–∫–ª–∞–¥–∫–∞ 1: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –≤–∏–¥–µ–æ ---
        video_tab = tk.Frame(notebook, bg="#18181b")
        notebook.add(video_tab, text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –≤–∏–¥–µ–æ")
        self._setup_video_tab(video_tab)

        # --- –í–∫–ª–∞–¥–∫–∞ 2: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∫–∞–Ω–∞–ª–∞ ---
        channel_tab = tk.Frame(notebook, bg="#18181b")
        notebook.add(channel_tab, text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∫–∞–Ω–∞–ª–∞")
        channel_label = tk.Label(channel_tab, text="–ó–¥–µ—Å—å –±—É–¥—É—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∫–∞–Ω–∞–ª–∞", font=(None, 16, "bold"), fg="#fff", bg="#18181b")
        channel_label.pack(pady=40)

    def _setup_video_tab(self, parent):
        # –í—Å—ë, —á—Ç–æ –±—ã–ª–æ –≤ setup_ui, –∫—Ä–æ–º–µ style/theme/notebook, –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å—é–¥–∞, –º–µ–Ω—è—è self –Ω–∞ self –∏–ª–∏ parent
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = tk.Frame(parent, bg="#18181b")
        container.pack(expand=True, fill="both")
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(container, bg="#18181b")
        title_frame.pack(pady=(32, 10))
        title_font = font.Font(size=22, weight="bold")
        title_label = tk.Label(title_frame, text="YTCommentsDownloader by ", font=title_font, fg="#fff", bg="#18181b")
        title_label.pack(side="left")
        rotmayer_label = tk.Label(title_frame, text="R0tmayer", font=title_font, fg="#6c63ff", bg="#18181b")
        rotmayer_label.pack(side="left", padx=(2, 0))
        # –°—Ç–∞—Ç—É—Å –ø–æ —Ü–µ–Ω—Ç—Ä—É
        self.status_label = tk.Label(container, text="", font=(None, 13, "bold"), fg="#fff", bg="#18181b")
        self.status_label.pack(pady=(0, 20))
        # –í–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        top_block = tk.Frame(container, bg="#18181b")
        top_block.pack(anchor="w", padx=40, pady=(0, 0))
        self.setup_folder_selection(top_block)
        # –ù–∏–∂–Ω–∏–π –±–ª–æ–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏
        bottom_block = tk.Frame(container, bg="#18181b")
        bottom_block.pack(anchor="w", padx=40, pady=(40, 0))
        url_label = tk.Label(bottom_block, text="–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ", font=(None, 15), fg="#fff", bg="#18181b")
        url_label.pack(anchor="w", pady=(0, 8))
        self.url_entry = tk.Entry(bottom_block, width=80, font=(None, 14), fg="#fff", bg="#23232a", insertbackground="#fff", relief="solid", bd=2)
        self.url_entry.pack(anchor="w", pady=4, ipady=8)
        self.url_entry.insert(0, "https://www.youtube.com/watch?v=pMt4JZeZ0r4")
        self.url_entry_placeholder = "–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ..."
        self.url_entry.bind("<FocusIn>", self._clear_placeholder)
        self.url_entry.bind("<FocusOut>", self._add_placeholder)
        self._add_placeholder()

        # --- –ù–æ–≤—ã–π –±–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ---
        count_block = tk.Frame(
            bottom_block,
            bg="#23232a",
            highlightbackground="#444",
            highlightthickness=2,
            bd=0,
            width=650,
            height=115
        )
        count_block.pack(anchor="w", pady=(18, 0))
        count_block.pack_propagate(False)  # –û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ-–ø–æ–¥–≥–æ–Ω–∫—É –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        count_block.configure(relief="ridge")
        count_label = tk.Label(count_block, text="üìä –°–∫–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–∫–∞—á–∞—Ç—å", font=(None, 15, "bold"), fg="#fff", bg="#23232a")
        count_label.pack(anchor="w", pady=(8, 4), padx=12)
        self.download_mode = tk.StringVar(value="all")
        radio_all = ttk.Radiobutton(count_block, text="–°–∫–∞—á–∞—Ç—å –≤—Å–µ", variable=self.download_mode, value="all", command=self._toggle_count_entry)
        radio_all.pack(anchor="w", pady=(0, 2), padx=24)
        radio_count = ttk.Radiobutton(count_block, text="–°–∫–∞—á–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", variable=self.download_mode, value="count", command=self._toggle_count_entry)
        radio_count.pack(anchor="w", pady=(0, 2), padx=24, side="left")
        self.count_entry = tk.Entry(count_block, width=10, font=(None, 15), fg="#fff", bg="#18181b", insertbackground="#fff", relief="flat", bd=0, state="disabled", highlightthickness=1, highlightbackground="#6c63ff")
        self.count_entry.pack(anchor="w", side="left", padx=(8, 0), pady=(0, 2))
        self.count_entry.insert(0, "100")

        self.download_btn = ttk.Button(
            bottom_block,
            text="–°–∫–∞—á–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
            command=self.start_download,
            style='Primary.TButton')
        self.download_btn.pack(anchor="w", pady=(16, 0), side="left")
        # –ö–Ω–æ–ø–∫–∞ –°–¢–û–ü
        self.stop_btn = ttk.Button(
            bottom_block,
            text="–°–¢–û–ü",
            style='Danger.TButton',
            command=self.stop_download,
            state="normal"
        )
        self.stop_btn.pack(anchor="w", pady=(16, 0), padx=(16, 0), side="left")
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_frame = tk.Frame(container, bg="#18181b")
        progress_frame.pack(anchor="w", padx=40, pady=(16, 0))
        self.progress_label = tk.Label(progress_frame, text="–°–∫–∞—á–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", font=(None, 13), fg="#b2b2b2", bg="#18181b")
        self.progress_label.pack(side="left")
        self.progress_value_label = tk.Label(progress_frame, text=" 0", font=(None, 13, "bold"), fg="#b2b2b2", bg="#18181b")
        self.progress_value_label.pack(side="left")
        # –°—Ç–∞—Ç—É—Å
        status_frame = tk.Frame(container, bg="#18181b")
        status_frame.pack(anchor="w", padx=40, pady=(4, 20))
        self.status_label = tk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å: ", font=(None, 13), fg="#b2b2b2", bg="#18181b")
        self.status_label.pack(side="left")
        self.status_value_label = tk.Label(status_frame, text="", font=(None, 13, "bold"), fg="#b2b2b2", bg="#18181b")
        self.status_value_label.pack(side="left")

    def _clear_placeholder(self, event=None):
        if self.url_entry.get() == self.url_entry_placeholder:
            self.url_entry.delete(0, tk.END)
            self.url_entry.config(fg="#fff")

    def _add_placeholder(self, event=None):
        if not self.url_entry.get():
            self.url_entry.insert(0, self.url_entry_placeholder)
            self.url_entry.config(fg="#b2b2b2")

    def _toggle_count_entry(self):
        if self.download_mode.get() == "count":
            self.count_entry.config(state="normal")
        else:
            self.count_entry.config(state="disabled")

    def set_status(self, text: str) -> None:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑
        emoji_map = [
            "‚è∏Ô∏è", "üîç", "üõ†Ô∏è", "üì•", "üíæ", "‚ùå", "‚úÖ", "üìä"
        ]
        if any(text.strip().startswith(e) for e in emoji_map):
            self.after(0, lambda: self.status_value_label.config(text=f" {text}"))
        else:
            emoji = ""
            if "–û–∂–∏–¥–∞–Ω–∏–µ" in text or "–ì–æ—Ç–æ–≤" in text:
                emoji = "‚è∏Ô∏è"
            elif "–ò—â—É" in text or "–ü—Ä–æ–≤–µ—Ä—è—é" in text:
                emoji = "üîç"
            elif "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é" in text or "–ü–æ–¥–∫–ª—é—á–∞—é—Å—å" in text:
                emoji = "üõ†Ô∏è"
            elif "–°–∫–∞—á–∏–≤–∞—é" in text or "–ó–∞–≥—Ä—É–∂–∞—é" in text:
                emoji = "üì•"
            elif "–°–æ—Ö—Ä–∞–Ω—è—é" in text:
                emoji = "üíæ"
            elif "–û—à–∏–±–∫–∞" in text:
                emoji = "‚ùå"
            elif "—É—Å–ø–µ—à–Ω–æ" in text or "–≥–æ—Ç–æ–≤–æ" in text or "–ì–æ—Ç–æ–≤–æ" in text:
                emoji = "‚úÖ"
            elif "–ù–∞–π–¥–µ–Ω–æ" in text:
                emoji = "üìä"
            self.after(0, lambda: self.status_value_label.config(text=f" {emoji} {text}"))

    def setup_folder_selection(self, parent=None) -> None:
        frame_parent = parent if parent is not None else self
        folder_frame = tk.Frame(frame_parent, bg="#18181b")
        folder_frame.pack(pady=8)
        folder_text_label = tk.Label(folder_frame, text="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", font=(None, 14), fg="#b2b2b2", bg="#18181b")
        folder_text_label.pack(side="left", padx=(0, 10))
        self.folder_label = tk.Label(folder_frame, text="–ù–µ –≤—ã–±—Ä–∞–Ω–∞", font=(None, 14), fg="#b2b2b2", bg="#18181b")
        self.folder_label.pack(side="left", padx=(0, 15))
        choose_folder_btn = ttk.Button(folder_frame, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É", command=self.choose_folder, style='Folder.TButton')
        choose_folder_btn.pack(side="left", padx=(10, 0))

    def load_settings(self) -> None:
        self.save_folder = load_folder()
        if self.save_folder:
            self.folder_label.config(text=self.save_folder, fg="white")

    def choose_folder(self) -> None:
        initial_dir = self.save_folder if self.save_folder else "~"
        folder = filedialog.askdirectory(initialdir=initial_dir, title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        if folder:
            self.save_folder = folder
            self.folder_label.config(text=folder, fg="white")
            save_folder(folder)

    def start_download(self) -> None:
        url = self.url_entry.get().strip()
        if url == self.url_entry_placeholder:
            url = ""
        if not url:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.")
            return
        if not self.save_folder:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
        if not validate_youtube_url(url):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube.")
            return
        self.progress_value_label.config(text=" 0")
        self.set_status("–ò—â—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...")
        self._stop_download = False
        self.stop_btn.config(state="normal")
        # --- –ü–æ–ª—É—á–∞–µ–º max_comments ---
        max_comments = None
        if self.download_mode.get() == "count":
            try:
                max_comments = int(self.count_entry.get())
                if max_comments <= 0:
                    raise ValueError
            except Exception:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.")
                return
        threading.Thread(target=self.download_comments, args=(url, max_comments), daemon=True).start()

    def stop_download(self):
        self._stop_download = True
        self.stop_btn.config(state="disabled")

    def download_comments(self, url: str, max_comments: int = None) -> None:
        try:
            # –ü–ª–∞–≤–Ω–∞—è —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
            self.set_status("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫—É...")
            self.after(400, lambda: self.set_status("üõ†Ô∏è –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ YouTube..."))
            self.after(800, lambda: self.set_status("üì° –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∏–¥–µ–æ..."))
            self.after(1200, lambda: self.set_status("üîç –ò—â—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏..."))
            # –°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def do_download():
                comments = []
                interrupted = False
                for idx, comment in enumerate(self._comment_iter(url, max_comments)):
                    if self._stop_download:
                        interrupted = True
                        break
                    comments.append(comment)
                    self.update_progress(idx + 1, 0)
                self.stop_btn.config(state="disabled")
                if not comments:
                    self.set_status("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    self.show_error("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    self.progress_value_label.config(text=" 0")
                    self.set_status("‚è∏Ô∏è –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    return
                self.set_status("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª...")
                filepath = get_next_filename(self.save_folder)
                if save_comments_to_file(comments, filepath):
                    if interrupted:
                        self.set_status(f"‚èπÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ({len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)")
                        self.show_success(filepath, len(comments), interrupted=True)
                    else:
                        self.set_status(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω ({len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)")
                        self.show_success(filepath, len(comments))
                    self.url_entry.delete(0, tk.END)
                    self._add_placeholder()
                else:
                    self.set_status("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
                    self.show_error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.")
                self.progress_value_label.config(text=" 0")
                self.set_status("‚è∏Ô∏è –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            threading.Thread(target=do_download, daemon=True).start()
        except Exception as e:
            self.set_status("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")
            self.show_error(str(e))
            self.progress_value_label.config(text=" 0")
            self.set_status("‚è∏Ô∏è –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def update_progress(self, current: int, total: int) -> None:
        self.after(0, lambda: self.progress_value_label.config(text=f" {current}"))
        self.set_status("–°–∫–∞—á–∏–≤–∞—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...")

    def _comment_iter(self, url, max_comments):
        from downloader import download_youtube_comments
        # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        for idx, comment in enumerate(download_youtube_comments(url, yield_comments=True, max_comments=max_comments)):
            yield comment

    def show_success(self, filepath: str, count: int = None, interrupted: bool = False) -> None:
        self.after(0, lambda: SuccessPopup(self, filepath, count, interrupted))

    def show_error(self, msg: str) -> None:
        self.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", msg))
